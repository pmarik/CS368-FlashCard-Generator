void writeSaveFile(string username){
		string writtenFileName = username + ".txt";
		ofstream myfile;
		myfile.open(writtenFileName);

		string deckName = "";
		for(int i = 0; i < allDecks.size(); ++i){
			deckName = (allDecks[i]).getDeckName();
			myfile << "Deck: " + deckName + "\n";

			int counts = 0;
			for(int k = 0; k < allDecks[i].getDeckSize(); ++k){
				counts++;
				string lineToWrite = ((allDecks[i]).getCard(k)).getFlashcardLine();
				if ((allDecks[i]).getDeckSize() == counts){
					myfile << lineToWrite;
				}
				else{
					myfile << lineToWrite + "\n";
				}
			}
		}

		myfile.close();
		cout << "Deck(s) saved!" << endl;
	}
  
  
  
  
  ===============================================================================================================================
  
  
  	/**
 	 * @brief Gets the username of a user
 	 *
  	 * @param N/A
 	 */
	string GetUsername() {
		
		//Initialize choice to enter while loop
		string username;
		bool validUsername = false;
		
		//User can repeatedly select username 
		while (!validUsername) {
			cout << username_prompt;
			getline(cin, username);
			cout << "Your username is " << username << ", correct? " << yes_or_no;


			
			//Variables regarding users choice 
			string choice;
			bool validChoice = false;
			
			//Ask user if the entered username is the one they want
			while (!validChoice) {
				getline(cin, choice);
				if (EqualIgnoreCase(choice, "YES") || EqualIgnoreCase(choice, "Y")) {
					validUsername = true;
					validChoice = true;

					string check = username + ".txt";
					
					ifstream ifile(check);
					if (ifile.is_open()){
						string line;
						
						int deckCount = 0;
						while(getline(ifile, line)){
							
 

							if (line.find("Deck: ") != string::npos){
								deckCount++;
								int deckCheck = line.find("Deck: ");
								int deckNameStart = deckCheck + 6;
								string loadDeckName = line.substr(deckNameStart);


								Deck anotherDeck(loadDeckName);
								allDecks.push_back(anotherDeck);
							}
							else {

								Flashcard tempCard(line);
								(allDecks[deckCount - 1]).add(tempCard);
							}


						}
					}

				} else if (EqualIgnoreCase(choice, "NO") || EqualIgnoreCase(choice, "N")) {
					validChoice = true;
				} else {
					cout << "Invalid option, please enter " << yes_or_no;
				}
			}
		}
		
		return username;
	}
  
  
  =========================================================================================================================
  
  else if (EqualIgnoreCase(option, "Quit")|| EqualIgnoreCase(option, "Q")) {
				validOption = true;
				persist = false;

				cout << endl << "Do you want to save your decks? ";

				bool validChoice = false;
				string choice;

				while (!validChoice) {
				getline(cin, choice);

				if (EqualIgnoreCase(choice, "YES") || EqualIgnoreCase(choice, "Y")) {
						validChoice = true;

						writeSaveFile(username);

					} else if (EqualIgnoreCase(choice, "NO") || EqualIgnoreCase(choice, "N")) {
						validChoice = true;

					} else {
						cout << "Invalid option, please enter " << yes_or_no;
					}
				}

				

				cout << endl << exit_message << endl;
			}
